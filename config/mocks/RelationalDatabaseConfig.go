// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	config "github.com/newscred/webhook-broker/config"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RelationalDatabaseConfig is an autogenerated mock type for the RelationalDatabaseConfig type
type RelationalDatabaseConfig struct {
	mock.Mock
}

// GetDBConnectionMaxIdleTime provides a mock function with given fields:
func (_m *RelationalDatabaseConfig) GetDBConnectionMaxIdleTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBConnectionMaxIdleTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetDBConnectionMaxLifetime provides a mock function with given fields:
func (_m *RelationalDatabaseConfig) GetDBConnectionMaxLifetime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBConnectionMaxLifetime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetDBConnectionURL provides a mock function with given fields:
func (_m *RelationalDatabaseConfig) GetDBConnectionURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBConnectionURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDBDialect provides a mock function with given fields:
func (_m *RelationalDatabaseConfig) GetDBDialect() config.DBDialect {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBDialect")
	}

	var r0 config.DBDialect
	if rf, ok := ret.Get(0).(func() config.DBDialect); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.DBDialect)
	}

	return r0
}

// GetMaxIdleDBConnections provides a mock function with given fields:
func (_m *RelationalDatabaseConfig) GetMaxIdleDBConnections() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxIdleDBConnections")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// GetMaxOpenDBConnections provides a mock function with given fields:
func (_m *RelationalDatabaseConfig) GetMaxOpenDBConnections() uint16 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxOpenDBConnections")
	}

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// NewRelationalDatabaseConfig creates a new instance of RelationalDatabaseConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRelationalDatabaseConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *RelationalDatabaseConfig {
	mock := &RelationalDatabaseConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
