// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	config "github.com/newscred/webhook-broker/config"
	mock "github.com/stretchr/testify/mock"
)

// LogConfig is an autogenerated mock type for the LogConfig type
type LogConfig struct {
	mock.Mock
}

// GetLogFilename provides a mock function with given fields:
func (_m *LogConfig) GetLogFilename() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogFilename")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLogLevel provides a mock function with given fields:
func (_m *LogConfig) GetLogLevel() config.LogLevel {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogLevel")
	}

	var r0 config.LogLevel
	if rf, ok := ret.Get(0).(func() config.LogLevel); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.LogLevel)
	}

	return r0
}

// GetMaxAgeForALogFile provides a mock function with given fields:
func (_m *LogConfig) GetMaxAgeForALogFile() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxAgeForALogFile")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetMaxLogBackups provides a mock function with given fields:
func (_m *LogConfig) GetMaxLogBackups() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxLogBackups")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetMaxLogFileSize provides a mock function with given fields:
func (_m *LogConfig) GetMaxLogFileSize() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxLogFileSize")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// IsCompressionEnabledOnLogBackups provides a mock function with given fields:
func (_m *LogConfig) IsCompressionEnabledOnLogBackups() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsCompressionEnabledOnLogBackups")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsLoggerConfigAvailable provides a mock function with given fields:
func (_m *LogConfig) IsLoggerConfigAvailable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLoggerConfigAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewLogConfig creates a new instance of LogConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogConfig {
	mock := &LogConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
