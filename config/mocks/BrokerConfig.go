// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// BrokerConfig is an autogenerated mock type for the BrokerConfig type
type BrokerConfig struct {
	mock.Mock
}

// GetMaxMessageQueueSize provides a mock function with given fields:
func (_m *BrokerConfig) GetMaxMessageQueueSize() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxMessageQueueSize")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetMaxRetry provides a mock function with given fields:
func (_m *BrokerConfig) GetMaxRetry() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxRetry")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// GetMaxWorkers provides a mock function with given fields:
func (_m *BrokerConfig) GetMaxWorkers() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxWorkers")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetRationalDelay provides a mock function with given fields:
func (_m *BrokerConfig) GetRationalDelay() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRationalDelay")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetRetriggerBaseEndpoint provides a mock function with given fields:
func (_m *BrokerConfig) GetRetriggerBaseEndpoint() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRetriggerBaseEndpoint")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRetryBackoffDelays provides a mock function with given fields:
func (_m *BrokerConfig) GetRetryBackoffDelays() []time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRetryBackoffDelays")
	}

	var r0 []time.Duration
	if rf, ok := ret.Get(0).(func() []time.Duration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]time.Duration)
		}
	}

	return r0
}

// IsPriorityDispatcherEnabled provides a mock function with given fields:
func (_m *BrokerConfig) IsPriorityDispatcherEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPriorityDispatcherEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRecoveryWorkersEnabled provides a mock function with given fields:
func (_m *BrokerConfig) IsRecoveryWorkersEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRecoveryWorkersEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewBrokerConfig creates a new instance of BrokerConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrokerConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrokerConfig {
	mock := &BrokerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
