// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	data "github.com/newscred/webhook-broker/storage/data"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ScheduledMessageRepository is an autogenerated mock type for the ScheduledMessageRepository type
type ScheduledMessageRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: message
func (_m *ScheduledMessageRepository) Create(message *data.ScheduledMessage) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.ScheduledMessage) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: channelID, messageID
func (_m *ScheduledMessageRepository) Get(channelID string, messageID string) (*data.ScheduledMessage, error) {
	ret := _m.Called(channelID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *data.ScheduledMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*data.ScheduledMessage, error)); ok {
		return rf(channelID, messageID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *data.ScheduledMessage); ok {
		r0 = rf(channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.ScheduledMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ScheduledMessageRepository) GetByID(id string) (*data.ScheduledMessage, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *data.ScheduledMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.ScheduledMessage, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.ScheduledMessage); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.ScheduledMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesReadyForDispatch provides a mock function with given fields: limit
func (_m *ScheduledMessageRepository) GetMessagesReadyForDispatch(limit int) []*data.ScheduledMessage {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesReadyForDispatch")
	}

	var r0 []*data.ScheduledMessage
	if rf, ok := ret.Get(0).(func(int) []*data.ScheduledMessage); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.ScheduledMessage)
		}
	}

	return r0
}

// GetNextScheduledMessageTime provides a mock function with given fields: channelID
func (_m *ScheduledMessageRepository) GetNextScheduledMessageTime(channelID string) (*time.Time, error) {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetNextScheduledMessageTime")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*time.Time, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(string) *time.Time); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduledMessageStatusCountsByChannel provides a mock function with given fields: channelID
func (_m *ScheduledMessageRepository) GetScheduledMessageStatusCountsByChannel(channelID string) ([]*data.StatusCount[data.ScheduledMsgStatus], error) {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledMessageStatusCountsByChannel")
	}

	var r0 []*data.StatusCount[data.ScheduledMsgStatus]
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*data.StatusCount[data.ScheduledMsgStatus], error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(string) []*data.StatusCount[data.ScheduledMsgStatus]); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.StatusCount[data.ScheduledMsgStatus])
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduledMessagesForChannel provides a mock function with given fields: channelID, page, statusFilters
func (_m *ScheduledMessageRepository) GetScheduledMessagesForChannel(channelID string, page *data.Pagination, statusFilters ...data.ScheduledMsgStatus) ([]*data.ScheduledMessage, *data.Pagination, error) {
	_va := make([]interface{}, len(statusFilters))
	for _i := range statusFilters {
		_va[_i] = statusFilters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, page)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledMessagesForChannel")
	}

	var r0 []*data.ScheduledMessage
	var r1 *data.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *data.Pagination, ...data.ScheduledMsgStatus) ([]*data.ScheduledMessage, *data.Pagination, error)); ok {
		return rf(channelID, page, statusFilters...)
	}
	if rf, ok := ret.Get(0).(func(string, *data.Pagination, ...data.ScheduledMsgStatus) []*data.ScheduledMessage); ok {
		r0 = rf(channelID, page, statusFilters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.ScheduledMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *data.Pagination, ...data.ScheduledMsgStatus) *data.Pagination); ok {
		r1 = rf(channelID, page, statusFilters...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*data.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *data.Pagination, ...data.ScheduledMsgStatus) error); ok {
		r2 = rf(channelID, page, statusFilters...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MarkDispatched provides a mock function with given fields: message
func (_m *ScheduledMessageRepository) MarkDispatched(message *data.ScheduledMessage) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for MarkDispatched")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.ScheduledMessage) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduledMessageRepository creates a new instance of ScheduledMessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduledMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduledMessageRepository {
	mock := &ScheduledMessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
