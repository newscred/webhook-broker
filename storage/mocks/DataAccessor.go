// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	storage "github.com/newscred/webhook-broker/storage"
	mock "github.com/stretchr/testify/mock"
)

// DataAccessor is an autogenerated mock type for the DataAccessor type
type DataAccessor struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *DataAccessor) Close() {
	_m.Called()
}

// GetAppRepository provides a mock function with given fields:
func (_m *DataAccessor) GetAppRepository() storage.AppRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppRepository")
	}

	var r0 storage.AppRepository
	if rf, ok := ret.Get(0).(func() storage.AppRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.AppRepository)
		}
	}

	return r0
}

// GetChannelRepository provides a mock function with given fields:
func (_m *DataAccessor) GetChannelRepository() storage.ChannelRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannelRepository")
	}

	var r0 storage.ChannelRepository
	if rf, ok := ret.Get(0).(func() storage.ChannelRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ChannelRepository)
		}
	}

	return r0
}

// GetConsumerRepository provides a mock function with given fields:
func (_m *DataAccessor) GetConsumerRepository() storage.ConsumerRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerRepository")
	}

	var r0 storage.ConsumerRepository
	if rf, ok := ret.Get(0).(func() storage.ConsumerRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ConsumerRepository)
		}
	}

	return r0
}

// GetDeliveryJobRepository provides a mock function with given fields:
func (_m *DataAccessor) GetDeliveryJobRepository() storage.DeliveryJobRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeliveryJobRepository")
	}

	var r0 storage.DeliveryJobRepository
	if rf, ok := ret.Get(0).(func() storage.DeliveryJobRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.DeliveryJobRepository)
		}
	}

	return r0
}

// GetLockRepository provides a mock function with given fields:
func (_m *DataAccessor) GetLockRepository() storage.LockRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLockRepository")
	}

	var r0 storage.LockRepository
	if rf, ok := ret.Get(0).(func() storage.LockRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.LockRepository)
		}
	}

	return r0
}

// GetMessageRepository provides a mock function with given fields:
func (_m *DataAccessor) GetMessageRepository() storage.MessageRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessageRepository")
	}

	var r0 storage.MessageRepository
	if rf, ok := ret.Get(0).(func() storage.MessageRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.MessageRepository)
		}
	}

	return r0
}

// GetProducerRepository provides a mock function with given fields:
func (_m *DataAccessor) GetProducerRepository() storage.ProducerRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProducerRepository")
	}

	var r0 storage.ProducerRepository
	if rf, ok := ret.Get(0).(func() storage.ProducerRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ProducerRepository)
		}
	}

	return r0
}

// NewDataAccessor creates a new instance of DataAccessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataAccessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataAccessor {
	mock := &DataAccessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
