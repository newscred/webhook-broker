// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	data "github.com/newscred/webhook-broker/storage/data"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: message
func (_m *MessageRepository) Create(message *data.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessage provides a mock function with given fields: message
func (_m *MessageRepository) DeleteMessage(message *data.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*data.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessagesAndJobs provides a mock function with given fields: ctx, messageIDs
func (_m *MessageRepository) DeleteMessagesAndJobs(ctx context.Context, messageIDs []string) error {
	ret := _m.Called(ctx, messageIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessagesAndJobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, messageIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: channelID, messageID
func (_m *MessageRepository) Get(channelID string, messageID string) (*data.Message, error) {
	ret := _m.Called(channelID, messageID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *data.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*data.Message, error)); ok {
		return rf(channelID, messageID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *data.Message); ok {
		r0 = rf(channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MessageRepository) GetByID(id string) (*data.Message, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *data.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*data.Message, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *data.Message); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ids
func (_m *MessageRepository) GetByIDs(ids []string) ([]*data.Message, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []*data.Message
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*data.Message, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []*data.Message); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Message)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageStatusCountsByChannel provides a mock function with given fields: channelID
func (_m *MessageRepository) GetMessageStatusCountsByChannel(channelID string) ([]*data.StatusCount[data.MsgStatus], error) {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageStatusCountsByChannel")
	}

	var r0 []*data.StatusCount[data.MsgStatus]
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*data.StatusCount[data.MsgStatus], error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(string) []*data.StatusCount[data.MsgStatus]); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.StatusCount[data.MsgStatus])
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesForChannel provides a mock function with given fields: channelID, page, statusFilters
func (_m *MessageRepository) GetMessagesForChannel(channelID string, page *data.Pagination, statusFilters ...data.MsgStatus) ([]*data.Message, *data.Pagination, error) {
	_va := make([]interface{}, len(statusFilters))
	for _i := range statusFilters {
		_va[_i] = statusFilters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, page)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesForChannel")
	}

	var r0 []*data.Message
	var r1 *data.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *data.Pagination, ...data.MsgStatus) ([]*data.Message, *data.Pagination, error)); ok {
		return rf(channelID, page, statusFilters...)
	}
	if rf, ok := ret.Get(0).(func(string, *data.Pagination, ...data.MsgStatus) []*data.Message); ok {
		r0 = rf(channelID, page, statusFilters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *data.Pagination, ...data.MsgStatus) *data.Pagination); ok {
		r1 = rf(channelID, page, statusFilters...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*data.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *data.Pagination, ...data.MsgStatus) error); ok {
		r2 = rf(channelID, page, statusFilters...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMessagesFromBeforeDurationThatAreCompletelyDelivered provides a mock function with given fields: delta, absoluteMaxMessages
func (_m *MessageRepository) GetMessagesFromBeforeDurationThatAreCompletelyDelivered(delta time.Duration, absoluteMaxMessages int) []*data.Message {
	ret := _m.Called(delta, absoluteMaxMessages)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesFromBeforeDurationThatAreCompletelyDelivered")
	}

	var r0 []*data.Message
	if rf, ok := ret.Get(0).(func(time.Duration, int) []*data.Message); ok {
		r0 = rf(delta, absoluteMaxMessages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Message)
		}
	}

	return r0
}

// GetMessagesNotDispatchedForCertainPeriod provides a mock function with given fields: delta
func (_m *MessageRepository) GetMessagesNotDispatchedForCertainPeriod(delta time.Duration) []*data.Message {
	ret := _m.Called(delta)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesNotDispatchedForCertainPeriod")
	}

	var r0 []*data.Message
	if rf, ok := ret.Get(0).(func(time.Duration) []*data.Message); ok {
		r0 = rf(delta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Message)
		}
	}

	return r0
}

// SetDispatched provides a mock function with given fields: txContext, message
func (_m *MessageRepository) SetDispatched(txContext context.Context, message *data.Message) error {
	ret := _m.Called(txContext, message)

	if len(ret) == 0 {
		panic("no return value specified for SetDispatched")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *data.Message) error); ok {
		r0 = rf(txContext, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
