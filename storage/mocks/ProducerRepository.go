// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	data "github.com/newscred/webhook-broker/storage/data"
	mock "github.com/stretchr/testify/mock"
)

// ProducerRepository is an autogenerated mock type for the ProducerRepository type
type ProducerRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: producerID
func (_m *ProducerRepository) Get(producerID string) (*data.Producer, error) {
	ret := _m.Called(producerID)

	var r0 *data.Producer
	if rf, ok := ret.Get(0).(func(string) *data.Producer); ok {
		r0 = rf(producerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Producer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(producerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: page
func (_m *ProducerRepository) GetList(page *data.Pagination) ([]*data.Producer, *data.Pagination, error) {
	ret := _m.Called(page)

	var r0 []*data.Producer
	if rf, ok := ret.Get(0).(func(*data.Pagination) []*data.Producer); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Producer)
		}
	}

	var r1 *data.Pagination
	if rf, ok := ret.Get(1).(func(*data.Pagination) *data.Pagination); ok {
		r1 = rf(page)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*data.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*data.Pagination) error); ok {
		r2 = rf(page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: producer
func (_m *ProducerRepository) Store(producer *data.Producer) (*data.Producer, error) {
	ret := _m.Called(producer)

	var r0 *data.Producer
	if rf, ok := ret.Get(0).(func(*data.Producer) *data.Producer); ok {
		r0 = rf(producer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Producer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*data.Producer) error); ok {
		r1 = rf(producer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
