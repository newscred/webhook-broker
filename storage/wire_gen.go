// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package storage

import (
	"github.com/newscred/webhook-broker/config"
)

import (
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/mattn/go-sqlite3"
)

// Injectors from wire.go:

// GetNewDataAccessor provides the facade for accessing all the object repositories
func GetNewDataAccessor(dbConfig config.RelationalDatabaseConfig, migrationConf *MigrationConfig, seedDataConfig config.SeedDataConfig) (DataAccessor, error) {
	sqlDB, err := GetConnectionPool(dbConfig, migrationConf, seedDataConfig)
	if err != nil {
		return nil, err
	}
	appRepository := NewAppRepository(sqlDB)
	pseudoProducerRepository := NewProducerRepository(sqlDB)
	duration := GetDefaultCacheTTLDuration()
	producerRepository := NewCachedProducerRepository(pseudoProducerRepository, duration)
	pseudoChannelRepository := NewChannelRepository(sqlDB)
	channelRepository := NewCachedChannelRepository(pseudoChannelRepository, duration)
	pseudoConsumerRepository := NewConsumerRepository(sqlDB, channelRepository)
	consumerRepository := NewCachedConsumerRepository(pseudoConsumerRepository, duration)
	messageRepository := NewMessageRepository(sqlDB, channelRepository, producerRepository)
	deliveryJobRepository := NewDeliveryJobRepository(sqlDB, messageRepository, consumerRepository)
	lockRepository := NewLockRepository(sqlDB)
	relationalDBDataAccessor := &RelationalDBDataAccessor{
		db:                    sqlDB,
		appRepository:         appRepository,
		producerRepository:    producerRepository,
		channelRepository:     channelRepository,
		consumerRepository:    consumerRepository,
		messageRepository:     messageRepository,
		deliveryJobRepository: deliveryJobRepository,
		lockRepository:        lockRepository,
	}
	return relationalDBDataAccessor, nil
}
