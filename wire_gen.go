// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/newscred/webhook-broker/config"
	"github.com/newscred/webhook-broker/controllers"
	"github.com/newscred/webhook-broker/dispatcher"
	"github.com/newscred/webhook-broker/storage"
)

// Injectors from wire.go:

// GetAppVersion retrieves the app version
func GetAppVersion() config.AppVersion {
	appVersion := config.GetVersion()
	return appVersion
}

// GetHTTPServer returns the server container with all adjacent data
func GetHTTPServer(cliConfig *config.CLIConfig) (*HTTPServiceContainer, error) {
	configConfig, err := config.GetConfigurationFromCLIConfig(cliConfig)
	if err != nil {
		return nil, err
	}
	serverLifecycleListenerImpl := NewServerListener()
	migrationConfig := GetMigrationConfig(cliConfig)
	dataAccessor, err := storage.GetNewDataAccessor(configConfig, migrationConfig, configConfig)
	if err != nil {
		return nil, err
	}
	appRepository := newAppRepository(dataAccessor)
	statusController := controllers.NewStatusController(appRepository)
	producerRepository := newProducerRepository(dataAccessor)
	producerController := controllers.NewProducerController(producerRepository)
	producersController := controllers.NewProducersController(producerRepository, producerController)
	channelRepository := newChannelRepository(dataAccessor)
	consumerRepository := newConsumerRepository(dataAccessor)
	messageRepository := newMessageRepository(dataAccessor)
	deliveryJobRepository := newDeliveryJobRepository(dataAccessor)
	messageController := controllers.NewMessageController(messageRepository, deliveryJobRepository)
	dlqController := controllers.NewDLQController(messageController, deliveryJobRepository, consumerRepository)
	consumerController := controllers.NewConsumerController(channelRepository, consumerRepository, dlqController)
	consumersController := controllers.NewConsumersController(consumerController, consumerRepository)
	messagesController := controllers.NewMessagesController(messageController, messageRepository)
	lockRepository := newLockRepository(dataAccessor)
	configuration := &dispatcher.Configuration{
		DeliveryJobRepo:          deliveryJobRepository,
		ConsumerRepo:             consumerRepository,
		LockRepo:                 lockRepository,
		BrokerConfig:             configConfig,
		ConsumerConnectionConfig: configConfig,
		MsgRepo:                  messageRepository,
	}
	messageDispatcher := dispatcher.NewMessageDispatcher(configuration)
	broadcastController := controllers.NewBroadcastController(channelRepository, messageRepository, producerRepository, messageDispatcher)
	messagesStatusController := controllers.NewMessagesStatusController(messagesController, messageRepository)
	channelController := controllers.NewChannelController(consumersController, messagesController, broadcastController, messagesStatusController, channelRepository)
	jobsController := controllers.NewJobsController(channelRepository, consumerRepository, deliveryJobRepository)
	jobController := controllers.NewJobController(channelRepository, consumerRepository, deliveryJobRepository)
	channelsController := controllers.NewChannelsController(channelRepository, channelController)
	controllersControllers := &controllers.Controllers{
		StatusController:         statusController,
		ProducersController:      producersController,
		ProducerController:       producerController,
		ChannelController:        channelController,
		ConsumerController:       consumerController,
		ConsumersController:      consumersController,
		JobsController:           jobsController,
		JobController:            jobController,
		BroadcastController:      broadcastController,
		MessageController:        messageController,
		MessagesController:       messagesController,
		DLQController:            dlqController,
		ChannelsController:       channelsController,
		MessagesStatusController: messagesStatusController,
	}
	router := controllers.NewRouter(controllersControllers)
	server := controllers.ConfigureAPI(configConfig, serverLifecycleListenerImpl, router)
	httpServiceContainer := &HTTPServiceContainer{
		Configuration: configConfig,
		Server:        server,
		DataAccessor:  dataAccessor,
		Listener:      serverLifecycleListenerImpl,
		Dispatcher:    messageDispatcher,
	}
	return httpServiceContainer, nil
}
