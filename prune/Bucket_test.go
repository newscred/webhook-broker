// Code generated by mockery v2.46.3. DO NOT EDIT.

package prune

import (
	context "context"

	blob "gocloud.dev/blob"

	mock "github.com/stretchr/testify/mock"

)

// MockBucket is an autogenerated mock type for the Bucket type
type MockBucket struct {
	mock.Mock
}

// Copy provides a mock function with given fields: ctx, dstKey, srcKey, opts
func (_m *MockBucket) Copy(ctx context.Context, dstKey string, srcKey string, opts *blob.CopyOptions) error {
	ret := _m.Called(ctx, dstKey, srcKey, opts)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *blob.CopyOptions) error); ok {
		r0 = rf(ctx, dstKey, srcKey, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, key
func (_m *MockBucket) Exists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReader provides a mock function with given fields: ctx, key, opts
func (_m *MockBucket) NewReader(ctx context.Context, key string, opts *blob.ReaderOptions) (Reader, error) {
	ret := _m.Called(ctx, key, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewReader")
	}

	var r0 Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *blob.ReaderOptions) (Reader, error)); ok {
		return rf(ctx, key, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *blob.ReaderOptions) Reader); ok {
		r0 = rf(ctx, key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *blob.ReaderOptions) error); ok {
		r1 = rf(ctx, key, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWriter provides a mock function with given fields: ctx, key, opts
func (_m *MockBucket) NewWriter(ctx context.Context, key string, opts *blob.WriterOptions) (Writer, error) {
	ret := _m.Called(ctx, key, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewWriter")
	}

	var r0 Writer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *blob.WriterOptions) (Writer, error)); ok {
		return rf(ctx, key, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *blob.WriterOptions) Writer); ok {
		r0 = rf(ctx, key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Writer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *blob.WriterOptions) error); ok {
		r1 = rf(ctx, key, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBucket creates a new instance of MockBucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBucket {
	mock := &MockBucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
