name: Webhook Broker Release

on:
  push:
    tags:
      - 'v*'

jobs:
  app_binary:
    name: Application Binary Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.15.6'
    - name: Create dist
      run: mkdir ./dist/
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Run Test & Build
      run: make dep-tools deps ci-test build
      env:
        APP_VERSION: ${{ steps.get_version.outputs.VERSION }}
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: dist-app
        path: dist/webhook-broker-${{ steps.get_version.outputs.VERSION }}.tar.bz2
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/webhook-broker-${{ steps.get_version.outputs.VERSION }}.tar.bz2
        asset_name: webhook-broker_${{ steps.get_version.outputs.VERSION }}_amd64.tar.bz2
        asset_content_type: application/x-bzip2

  docker_containers:
    name: Docker Container Release

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

    -
      uses: docker/login-action@v1
      name: Login to DockerHub
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    -
      uses: docker/login-action@v1
      name: Login to Github Docker Registry
      with:
        registry: docker.pkg.github.com
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    -
      uses: docker/build-push-action@v2
      name: Push
      id: build_push
      with:
        push: true
        tags: |
          imyousuf/webhook-broker:${{ steps.get_version.outputs.VERSION }}
          docker.pkg.github.com/imyousuf/webhook-broker/w7b6:${{ steps.get_version.outputs.VERSION }}

  helm_chart:
    name: Helm Chart Release

    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: ${{ secrets.HELM_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.HELM_AWS_SECRET_ACCESS_KEY }}

    steps:
    - uses: actions/checkout@v2
    - uses: azure/setup-helm@v1
    - name: Install Helm S3 Plugin
      run: helm plugin install https://github.com/hypnoglow/helm-s3.git
    - name: Setup helm.imytech.net Helm Repo
      run: helm repo add imy-helm-charts s3://imy-us-public/helm-charts/
    - name: Build Helm Package
      working-directory: deploy-pkg/webhook-broker-chart/
      run: helm package ./
    - name: Push to Helm Repo
      working-directory: deploy-pkg/webhook-broker-chart/
      run: helm s3 push --force --relative ./webhook-broker-chart-*.tgz imy-helm-charts
    - uses: chetan/invalidate-cloudfront-action@master
      env:
        DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
        PATHS: '/*'
